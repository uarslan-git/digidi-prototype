using UnityEngine;namespace CrazyMinnow.SALSA.OneClicks{	public class OneClickCC4_GameReadyBuild : OneClickBase	{		/// <summary>		/// RELEASE NOTES:		/// 2023-03-29: Changed SMR searches to capture game or base nomenclature.		/// 2022-07-12: Initial release to support the changes in CC4 models and		///		provides a preset for game-ready-builds which have different bones		///		and blendshape movements.		/// ==========================================================================		/// PURPOSE: This script provides simple, simulated lip-sync input to the		///		Salsa component from text/string values. For the latest information		///		visit crazyminnowstudio.com.		/// ==========================================================================		/// DISCLAIMER: While every attempt has been made to ensure the safe content		///		and operation of these files, they are provided as-is, without		///		warranty or guarantee of any kind. By downloading and using these		///		files you are accepting any and all risks associated and release		///		Crazy Minnow Studio, LLC of any and all liability.		/// ==========================================================================		/// </summary>		public static void Setup(GameObject gameObject)		{			////////////////////////////////////////////////////////////////////////////////////////////////////////////			//	SETUP Requirements:			//		use NewExpression("expression name") to start a new viseme/emote expression.			//		use AddShapeComponent to add blendshape configurations, passing:			//			- string array of shape names to look for.			//			  : string array can be a single element.			//			  : string array can be a single regex search string.			//			    note: useRegex option must be set true.			//			- optional string name prefix for the component.			//			- optional blend amount (default = 1.0f).			//			- optional regex search option (default = false).			Init();			#region SALSA-Configuration			NewConfiguration(OneClickConfiguration.ConfigType.Salsa);			{				////////////////////////////////////////////////////////				// SMR regex searches (enable/disable/add as required).				AddSmrSearch("^CC_(base|game)_Body.*$");				AddSmrSearch("^CC_(base|game)_Tongue.*$");				////////////////////////////////////////////////////////				// Adjust SALSA settings to taste...				// - data analysis settings				autoAdjustAnalysis = true;				autoAdjustMicrophone = false;				audioUpdateDelay = 0.095f;				// - advanced dynamics settings				loCutoff = 0.015f;				hiCutoff = 0.75f;				useAdvDyn = true;				advDynPrimaryBias = 0.5f;				useAdvDynJitter = false;				advDynJitterAmount = 0.1f;				advDynJitterProb = 0.2f;				advDynSecondaryMix = 0f;				emphasizerTrigger = 0f;				////////////////////////////////////////////////////////				// Viseme setup...				NewExpression("w");				AddBoneComponent("^CC_Base_JawRoot$",					new TformBase(new Vector3(0.02461322f, 0.01624778f, 4.43144E-07f),					new Quaternion(5.382616E-07f, -6.750596E-05f, 0.9987144f, 0.05069043f),					new Vector3(1f, 1f, 1f)),					0.11f, 0f, 0.06f,					"CC_Base_JawRoot",					false, true, true);				AddShapeComponent(new []{"V_Tight_O"}, 0.11f, 0f, 0.06f, "V_Tight_O", 0.65f, true);				AddShapeComponent(new []{"Tongue_In"}, 0.11f, 0f, 0.06f, "Tongue_In", 0.3f, true);				NewExpression("f");				AddBoneComponent("^CC_Base_JawRoot$",					new TformBase(new Vector3(0.02461322f, 0.01624778f, 4.43144E-07f),					new Quaternion(5.931381E-07f, -6.755066E-05f, 0.9989046f, 0.04679359f),					new Vector3(1f, 1f, 1f)),					0.11f, 0f, 0.06f,					"CC_Base_JawRoot",					false, true, true);				AddShapeComponent(new []{"V_Dental_Lip"}, 0.11f, 0f, 0.06f, "V_Dental_Lip", 0.9f, true);				AddShapeComponent(new []{"Jaw_Open"}, 0.11f, 0f, 0.06f, "Jaw_Open", 0.08f, true);				AddShapeComponent(new []{"Tongue_In"}, 0.11f, 0f, 0.06f, "Tongue_In", 0.2f, true);				NewExpression("t");				AddBoneComponent("^CC_Base_JawRoot$",					new TformBase(new Vector3(0.02461322f, 0.01624778f, 4.43144E-07f),					new Quaternion(3.975474E-07f, -6.749292E-05f, 0.9983438f, 0.05752898f),					new Vector3(1f, 1f, 1f)),					0.11f, 0f, 0.06f,					"CC_Base_JawRoot",					false, true, true);				AddShapeComponent(new []{"Mouth_Down_Lower_L"}, 0.11f, 0f, 0.06f, "Mouth_Down_Lower_L", 0.4f, true);				AddShapeComponent(new []{"Mouth_Down_Lower_R"}, 0.11f, 0f, 0.06f, "Mouth_Down_Lower_R", 0.4f, true);				AddShapeComponent(new []{"V_Tongue_up"}, 0.11f, 0f, 0.06f, "V_Tongue_up", 0.6f, true);				AddShapeComponent(new []{"V_Tongue_Out"}, 0.11f, 0f, 0.06f, "V_Tongue_Out", 0.254f, true);				AddShapeComponent(new []{"Mouth_Smile_L"}, 0.11f, 0f, 0.06f, "Mouth_Smile_L", 0.33f, true);				AddShapeComponent(new []{"Mouth_Smile_R"}, 0.11f, 0f, 0.06f, "Mouth_Smile_R", 0.33f, true);				NewExpression("th");				AddBoneComponent("^CC_Base_JawRoot$",					new TformBase(new Vector3(0.02461322f, 0.01624778f, 4.43144E-07f),					new Quaternion(-3.75381E-07f, -6.756926E-05f, 0.9982508f, 0.05912095f),					new Vector3(1f, 1f, 1f)),					0.11f, 0f, 0.06f,					"CC_Base_JawRoot",					false, true, true);				AddShapeComponent(new []{"Mouth_Dimple_L"}, 0.11f, 0f, 0.06f, "Mouth_Dimple_L", 0.18f, true);				AddShapeComponent(new []{"Mouth_Dimple_R"}, 0.11f, 0f, 0.06f, "Mouth_Dimple_R", 0.18f, true);				AddShapeComponent(new []{"Mouth_Down_Lower_L"}, 0.11f, 0f, 0.06f, "Mouth_Down_Lower_L", 0.25f, true);				AddShapeComponent(new []{"Mouth_Down_Lower_R"}, 0.11f, 0f, 0.06f, "Mouth_Down_Lower_R", 0.25f, true);				AddShapeComponent(new []{"V_Tongue_Raise"}, 0.11f, 0f, 0.06f, "V_Tongue_Raise", 0.6f, true);				AddShapeComponent(new []{"V_Tongue_Out"}, 0.11f, 0f, 0.06f, "V_Tongue_Out", 0.5f, true);				AddShapeComponent(new []{"Tongue_Wide"}, 0.11f, 0f, 0.06f, "Tongue_Wide", 0.5f, true);				NewExpression("ow");				AddBoneComponent("^CC_Base_JawRoot$",					new TformBase(new Vector3(0.02461322f, 0.01624778f, 4.43144E-07f),					new Quaternion(-1.328343E-06f, -6.721538E-05f, 0.996443f, 0.08426984f),					new Vector3(1f, 1f, 1f)),					0.11f, 0f, 0.06f,					"CC_Base_JawRoot",					false, true, true);				AddShapeComponent(new []{"V_Tight_O"}, 0.11f, 0f, 0.06f, "V_Tight_O", 0.6f, true);				AddShapeComponent(new []{"V_Lip_Open"}, 0.11f, 0f, 0.06f, "V_Lip_Open", 0.6f, true);				AddShapeComponent(new []{"Tongue_In"}, 0.11f, 0f, 0.06f, "Tongue_In", 0.3f, true);				NewExpression("ee");				AddBoneComponent("^CC_Base_JawRoot$",					new TformBase(new Vector3(0.02461322f, 0.01624778f, 4.43144E-07f),					new Quaternion(-6.62891E-07f, -6.739418E-05f, 0.9976999f, 0.06778551f),					new Vector3(1f, 1f, 1f)),					0.11f, 0f, 0.06f,					"CC_Base_JawRoot",					false, true, true);				AddShapeComponent(new []{"V_Wide"}, 0.11f, 0f, 0.06f, "V_Wide", 1f, true);				AddShapeComponent(new []{"Mouth_Dimple_L"}, 0.11f, 0f, 0.06f, "Mouth_Dimple_L", 0.33f, true);				AddShapeComponent(new []{"Mouth_Dimple_R"}, 0.11f, 0f, 0.06f, "Mouth_Dimple_R", 0.33f, true);				AddShapeComponent(new []{"Mouth_Down_Lower_L"}, 0.11f, 0f, 0.06f, "Mouth_Down_Lower_L", 0.35f, true);				AddShapeComponent(new []{"Mouth_Down_Lower_R"}, 0.11f, 0f, 0.06f, "Mouth_Down_Lower_R", 0.35f, true);				AddShapeComponent(new []{"V_Tongue_up"}, 0.11f, 0f, 0.06f, "V_Tongue_up", 0.7f, true);				NewExpression("oo");				AddBoneComponent("^CC_Base_JawRoot$",					new TformBase(new Vector3(0.02461322f, 0.01624778f, 4.43144E-07f),					new Quaternion(-4.154872E-06f, -6.666404E-05f, 0.9936293f, 0.1126976f),					new Vector3(1f, 1f, 1f)),					0.11f, 0f, 0.06f,					"CC_Base_JawRoot",					false, true, true);				AddShapeComponent(new []{"V_Lip_Open"}, 0.11f, 0f, 0.06f, "V_Lip_Open", 0.545f, true);				AddShapeComponent(new []{"V_Affricate"}, 0.11f, 0f, 0.06f, "V_Affricate", 0.3f, true);				AddShapeComponent(new []{"Tongue_Down"}, 0.11f, 0f, 0.06f, "Tongue_Down", 0.79f, true);				AddShapeComponent(new []{"V_Wide"}, 0.11f, 0f, 0.06f, "V_Wide", 0.65f, true);			}			#endregion // SALSA-configuration			#region EmoteR-Configuration			NewConfiguration(OneClickConfiguration.ConfigType.Emoter);			{				////////////////////////////////////////////////////////				// SMR regex searches (enable/disable/add as required).				AddSmrSearch("^CC_(base|game)_Body.*$");				useRandomEmotes = false;				isChancePerEmote = true;				numRandomEmotesPerCycle = 0;				randomEmoteMinTimer = 1f;				randomEmoteMaxTimer = 2f;				randomChance = 0.5f;				useRandomFrac = false;				randomFracBias = 0.5f;				useRandomHoldDuration = false;				randomHoldDurationMin = 0.1f;				randomHoldDurationMax = 0.5f;				////////////////////////////////////////////////////////				// Emote setup...				NewExpression("exasper");				AddEmoteFlags(false, true, false, 0.628f, true);				AddShapeComponent(new []{"Cheek_Puff_L"}, 0.2f, 0.1f, 0.15f, "Cheek_Puff_L", 0.297f, true);				AddShapeComponent(new []{"Cheek_Puff_R"}, 0.2f, 0.1f, 0.15f, "Cheek_Puff_R", 0.199f, true);				AddShapeComponent(new []{"Brow_Raise_Inner_L"}, 0.2f, 0.1f, 0.15f, "Brow_Raise_Inner_L", 0.555f, true);				AddShapeComponent(new []{"Brow_Raise_Inner_R"}, 0.2f, 0.1f, 0.15f, "Brow_Raise_Inner_R", 0.52f, true);				NewExpression("soften");				AddEmoteFlags(false, true, false, 0.705f);				AddShapeComponent(new []{"Mouth_Smile_L"}, 0.2f, 0.1f, 0.15f, "Mouth_Smile_L", 0.24f, true);				AddShapeComponent(new []{"Mouth_Smile_R"}, 0.2f, 0.1f, 0.15f, "Mouth_Smile_R", 0.2f, true);				AddShapeComponent(new []{"Eye_Squint_L"}, 0.2f, 0.1f, 0.15f, "Eye_Squint_L", 0.17f, true);				AddShapeComponent(new []{"Eye_Squint_R"}, 0.2f, 0.1f, 0.15f, "Eye_Squint_R", 0.15f, true);				AddShapeComponent(new []{"Brow_Raise_Inner_L"}, 0.2f, 0.1f, 0.15f, "Brow_Raise_Inner_L", 0.37f, true);				AddShapeComponent(new []{"Brow_Raise_Inner_R"}, 0.2f, 0.1f, 0.15f, "Brow_Raise_Inner_R", 0.29f, true);				NewExpression("browsUp");				AddEmoteFlags(false, true, false, 0.469f);				AddShapeComponent(new []{"Brow_Raise_Inner_L"}, 0.2f, 0.1f, 0.15f, "Brow_Raise_Inner_L", 0.31f, true);				AddShapeComponent(new []{"Brow_Raise_Inner_R"}, 0.25f, 0.2f, 0.1f, "Brow_Raise_Inner_R", 0.28f, true);				AddShapeComponent(new []{"Brow_Raise_Outer_R"}, 0.25f, 0.2f, 0.15f, "Brow_Raise_Outer_R", 0.38f, true);				AddShapeComponent(new []{"Brow_Raise_Outer_L"}, 0.2f, 0.08f, 0.15f, "Brow_Raise_Outer_L", 0.54f, true);				NewExpression("browUp");				AddEmoteFlags(false, true, false, 0.817f);				AddShapeComponent(new []{"Brow_Raise_Outer_R"}, 0.2f, 0.1f, 0.15f, "Brow_Raise_Outer_R", 0.45f, true);				AddShapeComponent(new []{"Brow_Raise_Inner_L"}, 0.2f, 0.1f, 0.15f, "Brow_Raise_Inner_L", 0.24f, true);				AddShapeComponent(new []{"Brow_Raise_Inner_R"}, 0.2f, 0.1f, 0.15f, "Brow_Raise_Inner_R", 0.38f, true);				NewExpression("squint");				AddEmoteFlags(false, true, false, 0.782f);				AddShapeComponent(new []{"Brow_Raise_Inner_R"}, 0.2f, 0.1f, 0.15f, "Brow_Raise_Inner_R", 0.29f, true);				AddShapeComponent(new []{"Brow_Drop_L"}, 0.2f, 0.1f, 0.15f, "Brow_Drop_L", 0.54f, true);				AddShapeComponent(new []{"Brow_Drop_R"}, 0.2f, 0.1f, 0.15f, "Brow_Drop_R", 0.55f, true);				AddShapeComponent(new []{"Eye_Squint_L"}, 0.2f, 0.1f, 0.15f, "Eye_Squint_L", 0.29f, true);				AddShapeComponent(new []{"Eye_Squint_R"}, 0.2f, 0.1f, 0.15f, "Eye_Squint_R", 0.35f, true);				NewExpression("focus");				AddEmoteFlags(false, true, false, 1f);				AddShapeComponent(new []{"Cheek_Raise_L"}, 0.2f, 0.1f, 0.15f, "Cheek_Raise_L", 0.57f, true);				AddShapeComponent(new []{"Cheek_Raise_R"}, 0.2f, 0.05f, 0.1f, "Cheek_Raise_R", 0.48f, true);				AddShapeComponent(new []{"Eye_Squint_L"}, 0.2f, 0.1f, 0.15f, "Eye_Squint_L", 0.31f, true);				AddShapeComponent(new []{"Eye_Squint_R"}, 0.2f, 0.1f, 0.15f, "Eye_Squint_R", 0.24f, true);				NewExpression("flare");				AddEmoteFlags(false, true, false, 1f);				AddShapeComponent(new []{"Nose_Sneer_L"}, 0.2f, 0.1f, 0.15f, "Nose_Sneer_L", 0.36f, true);				AddShapeComponent(new []{"Nose_Sneer_R"}, 0.2f, 0.1f, 0.15f, "Nose_Sneer_R", 0.22f, true);				AddShapeComponent(new []{"Nose_Nostril_Dilate_L"}, 0.2f, 0.1f, 0.15f, "Nose_Nostril_Dilate_L", 0.35f, true);				AddShapeComponent(new []{"Nose_Nostril_Dilate_R"}, 0.2f, 0.1f, 0.15f, "Nose_Nostril_Dilate_R", 0.3f, true);				NewExpression("scrunch");				AddEmoteFlags(false, true, false, 0.853f);				AddShapeComponent(new []{"Nose_Sneer_L"}, 0.2f, 0.1f, 0.15f, "Nose_Sneer_L", 0.44f, true);				AddShapeComponent(new []{"Nose_Sneer_R"}, 0.2f, 0.1f, 0.15f, "Nose_Sneer_R", 0.66f, true);				AddShapeComponent(new []{"Nose_Nostril_Dilate_L"}, 0.2f, 0.1f, 0.15f, "Nose_Nostril_Dilate_L", 0.53f, true);				AddShapeComponent(new []{"Nose_Nostril_Dilate_R"}, 0.2f, 0.1f, 0.15f, "Nose_Nostril_Dilate_R", 0.17f, true);				AddShapeComponent(new []{"Nose_Crease_L"}, 0.2f, 0.1f, 0.15f, "Nose_Crease_L", 0.29f, true);				AddShapeComponent(new []{"Nose_Nostril_Down_L"}, 0.2f, 0.1f, 0.15f, "Nose_Nostril_Down_L", 0.24f, true);				AddShapeComponent(new []{"Nose_Nostril_Down_R"}, 0.2f, 0.1f, 0.15f, "Nose_Nostril_Down_R", 0.34f, true);				AddShapeComponent(new []{"Nose_Tip_L"}, 0.2f, 0.1f, 0.15f, "Nose_Tip_L", 0.14f, true);				AddShapeComponent(new []{"Nose_Tip_Up"}, 0.2f, 0.1f, 0.15f, "Nose_Tip_Up", 0.32f, true);			}			#endregion // EmoteR-configuration			DoOneClickiness(gameObject);			if (selectedObject.GetComponent<SalsaAdvancedDynamicsSilenceAnalyzer>() == null)				selectedObject.AddComponent<SalsaAdvancedDynamicsSilenceAnalyzer>();			//Darrin's Tweaks			salsa.useTimingsOverride = true;			salsa.globalDurON = 0.125f;			salsa.globalDurOffBalance = -0.18f;			salsa.globalNuanceBalance = -0.213f;			emoter.NumRandomEmphasizersPerCycle = 4;			EmoteExpression emote;			emote = emoter.FindEmote("exasper");			if (emote != null)				emote.frac = 0.628f;			emote = emoter.FindEmote("soften");			if (emote != null)				emote.frac = 0.705f;			emote = emoter.FindEmote("browsUp");			if (emote != null)				emote.frac = 0.469f;			emote = emoter.FindEmote("browUp");			if (emote != null)				emote.frac = 0.817f;			emote = emoter.FindEmote("squint");			if (emote != null)				emote.frac = 0.782f;			emote = emoter.FindEmote("focus");			if (emote != null)				emote.frac = 1f;			emote = emoter.FindEmote("flare");			if (emote != null)				emote.frac = 1f;			emote = emoter.FindEmote("scrunch");			if (emote != null)				emote.frac = 0.853f;			var silenceAnalyzer = selectedObject.GetComponent<SalsaAdvancedDynamicsSilenceAnalyzer>();			if (silenceAnalyzer)			{				silenceAnalyzer.silenceThreshold = 0.9f;				silenceAnalyzer.timingStartPoint = 0.4f;				silenceAnalyzer.timingEndVariance = 0.7f;				silenceAnalyzer.silenceSampleWeight = 0.98f;				silenceAnalyzer.bufferSize = 512;			}		}	}}